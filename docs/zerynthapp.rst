.. module:: zerynthapp

This module provides access to the Zerynth App functionalities.

The Zerynth App is an innovative mobile app designed to make interaction with Zerynth programs easy. A Zerynth App can be tought as a bidirectional communication channel between a Zerynth script running on a board and some HTML+Javascript running on the mobile app.

A program using the Zerynthapp module must provide some components:

    * an UI template, responsible of the Javascript part
    * a set of event functions representing the channel from Javascript to Python
    * a set of notifications representing the channel from Python to Javascript


When the ZerynthApp class, defined in this module, is instantiated and run, it waits for messages coming
from the mobile app both via wifi or bluetooth LE (BLE is not yet supported).


ZerynthApp Step by Step
=======================

Using the zerynthapp module is easy. 

    * First, an html template must be defined by adding a new html file to the current project. The template must be declared as a resource, so it can be saved to flash and opened from the script.
    * A zerynthapp instance must be created with a name and a description
    * The zerynthapp instance must be configured, linking event names to functions
    * The zerynthapp instance must be run

HTML templates
**************

HTML templates are transferred from the board to the mobile app where they are rendered. Javascript is needed to add some logic to the template. A Javascript object called *ZerynthApp* can be used to remotely call Python functions by name.

Templates are better explained with examples: ::
    
    <html>
        <head>
            <zerynth/>
            <zerynth-jquery/>
            <zerynth-jquery-mobile/>
            <meta name="viewport" content="width=device-width, initial-scale=1">
        </head>        
        <body>
            <div data-role="page">
                <div data-role="header"><h1>Zerynth Test App</h1></div>
                <div role="main" class="ui-content" style="text-align:center">
                    <button class="ui-btn ui-btn-inline" onclick="ZerynthApp.call('showmsg','Random number for you:'+Math.random())">Click me!</button>
                    <p id="label"></p>
                </div>
                <div data-role="footer">Powered by Zerynth</div>
            </div>
            <script>
                function update_label(msg){
                    $("#label").text(msg)
                }
                ZerynthApp.listen("btn",update_label)
                ZerynthApp.jquerymobile_scalecontent()
            </script>
        </body>
    </html>

In the head section special tags can be used to import javascript libraries embedded in the mobile app. They are:

    * <zerynth/>  to import the basic Zerynth functionalities
    * <zerynth-jquery/> to import the JQuery library
    * <zerynth-jquery-mobile/> to import the JQuery Mobile library
    * <zerynth-jqwidgets/> to import the JQWidgets library

In the body section, the html scaffolding is layed out and logic is inserted to link the template events with the functions on running on the board. For example, in the onclick part of the button an event called *showmsg* is generated by using the construct ZerynthApp.call(event,parameters). All the parameters are encoded, sent to the board, and used as arguments of the Python function linked to the event *event*. The ZerynthApp.call function is the channel from Javascript to Python

In the final script section the ZerynthApp Javascript object is used to register a notification name "btn". Everytime the board will send a notification named "btn" the update_label function will be executed (in this case a html element text is changed). Parameters can be passed to the notify function and transmitted to the mobile app. The notify method of the ZerynthApp instance is the channel from Python to Javascript.


Zerynth App Instances
*********************

An HTML template must be coupled with a Zerynth script running on a board. Here it is an example: ::

    import streams
    from wireless import wifi
    from cc3000 import cc3000_tiny as cc3000
    from zerynthapp import zerynthapp


    streams.serial()

    new_resource("template.html")

    try:
        cc3000.auto_init()

        print("Establishing Link...")
        wifi.link("Network Name",wifi.WIFI_WPA2,"WIFI-Password")
        print("Ok!")        
    except Exception as e:
        print(e)

    def show_message(msg):
        print(msg)

    pressed =0 
    def btn_pressed():
        global pressed
        pressed+=1
        vp.notify("btn","Board button pressed ["+str(pressed)+"] times")
        
        
    onPinFall(BTN0,btn_pressed)


    # configure and start the zerynthapp

    vp = zerynthapp.ZerynthApp("Test","Test Object","resource://template.html")

    vp.on("showmsg",show_message)

    vp.run()

This simple script connects to the local Wifi network, configures and runs a ZerynthApp instance. First of all, the template must be saved to flash by calling the function *new_resource*. It can then be opened with the url "resource://name-of-file.extension". 
A ZerynthApp instance is created passing the name of the object, its description and the url to the template.
The method *on* is called to configure the Javascript-to-Python channel: everytime an event "showmsg" is sent from Javascript, the function show_message is called in the Zerynth script.
When the board button is pressed, the notify method is called, and the event "btn" is transferred to the mobile app, where Javascript, configured in the template, calls the function update_label.  

Object discovery, template transfer and object-to-mobile-app linking is automatically handled b the ZerynthApp instance.

Finally, more than one ZerynthApp instance can be created in the same Zerynth script.

    
The ZerynthApp class
******************

.. class:: ZerynthApp(name,desc,template,logging=False)

        Create a ZerynthApp instance named *name*, with short description *desc* and with UI template *template*
        If *logging* is True, some debug messages are printed.

        *template* must be the url of anything that can be opened with the open builtin.

    
.. method:: on(event,fn)        

        Associate the event name *event* to the callable *fn*. Everytime the ZerynthApp instance receives an *event*
        from the mobile app, the callable *fn* is executed (possibly with arguments).
                
        
.. method:: notify(what,value)        

        Send the message named *what* with value *value* to the mobile app. Notifications are not sent if
        the mobile app is not linked (i.e. has not yet received the UI template).
                
        
.. method:: unlink()        

        Remove the link with the mobile app.
                
        
.. method:: run()        

        Start the ZerynthApp instance on a separate thread and returns immediately.
                
        
